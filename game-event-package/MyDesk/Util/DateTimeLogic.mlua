@Logic
script DateTimeLogic extends Logic

	property integer ServerTimeOffset = 0

	method integer GetTimeElapsed()
		return DateTime.UtcNow.Elapsed + self.ServerTimeOffset
	end

	method any GetLocalDateTime()
		return _UtilLogic:GetLocalTimeFrom(DateTime(self:GetTimeElapsed()))
	end

	@ExecSpace("ServerOnly")
	method void SetServerTimeOffset(integer serverTimeOffset)
		local prev = self.ServerTimeOffset
		self.ServerTimeOffset = serverTimeOffset
		
		local event = ServerTimeOffsetChangedEvent()
		event.PrevServerTimeOffset = prev
		event.ServerTimeOffset = serverTimeOffset
		
		self:SendEvent(event)
		self:SendEventToClient(event)
	end

	@ExecSpace("Client")
	method void SendEventToClient(ServerTimeOffsetChangedEvent event)
		self.ServerTimeOffset = event.ServerTimeOffset
		self:SendEvent(event)
	end

	@ExecSpace("ServerOnly")
	method void SetServerTime(integer utcTimeElapsed)
		local timeOffset = utcTimeElapsed - DateTime.UtcNow.Elapsed
		self:SetServerTimeOffset(timeOffset)
	end

	@ExecSpace("ServerOnly")
	method void AddServerTimeOffset(string elapsed)
		local timeOffset = self.ServerTimeOffset + elapsed
		self:SetServerTimeOffset(timeOffset)
	end

	@ExecSpace("ServerOnly")
	method void ResetServerTimeOffset()
		self:SetServerTimeOffset(0)
	end

	method any GetDateTime()
		return DateTime(self:GetTimeElapsed())
	end

	method integer GetMillisecondsFromDays(integer day)
		return (day * 24 * 60 * 60 * 1000)
	end

	method integer GetElapsedFromDateString(string dateTimeStr)
		if _Util:IsNilorEmptyString(dateTimeStr) then
			return 0
		end
		
		return DateTime(dateTimeStr).Elapsed
	end

end