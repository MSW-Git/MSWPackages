@Component
script UIGameEventItem extends Component
	
	property Entity BG = nil
	
	property TextComponent Text_Status = nil
	
	property TextComponent Text_Date = nil
	
	property Entity Banner = nil

	property any Struct = nil
	
	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		local entity = self.Entity
		
		self.BG = entity:GetChildByName("BG")
		
		local panel = entity:GetChildByName("Panel")
		self.Text_Status = panel:GetChildByName("Text_Status").TextComponent
		self.Text_Date = panel:GetChildByName("Text_Date").TextComponent
		
		local btn = entity:GetChildByName("Btn")
		btn:ConnectEvent(ButtonClickEvent, self.OnClickBtn)
	end
	
	@ExecSpace("ClientOnly")
	method void Init(integer defEnum)
		local modelName = _GameEventDefTypeEnum:GetBannnerModelName(defEnum)	
		if modelName == nil then
			log_error(string.format("Cannot find modelName. GameEvent DefEnum : %d", defEnum))
			return
		end

		local modelId = _EntryService:GetModelIdByName(modelName)
		if _Util:IsNilorEmptyString(modelId) then
			log_error(string.format("Cannot find modelId. modelName : %s", modelName))
			return
		end

		local banner = _SpawnService:SpawnByModelId(modelId, "Banner", FastVector3.zero, self.BG)
		self.Banner = banner
	end
	
	@ExecSpace("ClientOnly")
	method void Set(GameEventStruct s)
		self.Struct = s
		self:SetStatus(s.Status)
		
		---@type GameEventScheduleData
		local scheduleData = s.ScheduleData
		self:SetDate(scheduleData.StartTime, scheduleData.EndTime)

		local banner = self.Banner
		if isvalid(banner) then
			banner.UIGameEventBanner:Set(s)
		end
	end
	
	@ExecSpace("ClientOnly")
	method void SetStatus(integer status)
		local text = nil
		if status == _GameEventStatusEnum.Preview then
			text = "Preview"
		elseif status == _GameEventStatusEnum.Active then
			text = "Active"
		elseif status == _GameEventStatusEnum.Grace then
			text = "Grace"
		else
			text = ""
		end
		
		self.Text_Status.Text = text
	end
	
	@ExecSpace("ClientOnly")
	method void SetDate(integer startTime, integer endTime)
		local startDate = DateTime(startTime)
		local startDateStr = _UtilLogic:GetLocalTimeFrom(startDate):ToFormattedString("yy-MM-dd HH:mm:ss")
		
		local endDate = DateTime(endTime)
		local endDateStr = _UtilLogic:GetLocalTimeFrom(endDate):ToFormattedString("yy-MM-dd HH:mm:ss")
		
		self.Text_Date.Text = string.format("%s ~ %s", startDateStr, endDateStr)
	end
	
	@ExecSpace("ClientOnly")
	method void OnClickBtn()
		local banner = self.Banner
		if not isvalid(banner) then
			return
		end

		banner.UIGameEventBanner:OnClick(self.Struct)
	end
end