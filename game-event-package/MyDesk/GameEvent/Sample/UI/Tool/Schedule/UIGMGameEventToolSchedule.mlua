@Component
script UIGMGameEventToolSchedule extends Component

	property UIGMGameEventTool Parent = nil

	property GridViewComponent GridViewComp = nil

	property Entity Item = nil

	property table GridViewDataTable = {}

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		local entity = self.Entity
		
		local item = entity:GetChildByName("Item")
		item.Enable = false
		self.Item = item
		
		local gridViewComp = entity:GetChildByName("GridView").GridViewComponent
		gridViewComp.ItemEntity = item
		gridViewComp.OnRefresh = self.OnRefresh
		gridViewComp.OnClear = self.OnClear
		self.GridViewComp = gridViewComp
		
		local btn_query = entity:GetChildByName("Btn_Query")
		btn_query:ConnectEvent(ButtonClickEvent, self.OnClickBtn_Query)
	end

	@ExecSpace("ClientOnly")
	method void Apply(table dataTable)
		table.initialize(self.GridViewDataTable, dataTable)
		
		local count = #self.GridViewDataTable
		self.GridViewComp.TotalCount = count
		self.GridViewComp:Refresh(true, true)
	end

	@ExecSpace("ClientOnly")
	method void OnRefresh(integer index, Entity entity)
		index += 1
		local s = self.GridViewDataTable[index]
		entity.UIGMGameEventToolScheduleItem:Set(s, self.Parent.TimeOffset)
	end

	@ExecSpace("ClientOnly")
	method void OnClear(integer index, Entity entity)
		entity.UIGMGameEventToolScheduleItem:Clear()
	end

	@ExecSpace("ClientOnly")
	method void OnClickBtn_Query()
		_GMGameEventToolLogic:RequestScheduleDataList(false)
	end

	@ExecSpace("ClientOnly")
	method void Invalidate(boolean resetPos)
		self.GridViewComp.TotalCount = #self.GridViewDataTable
		self.GridViewComp:Refresh(resetPos, true)
	end

end