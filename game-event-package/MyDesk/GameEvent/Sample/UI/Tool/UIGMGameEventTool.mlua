@Component
script UIGMGameEventTool extends Component
	
	property Entity Text_TimeOffset = nil
	
	property Entity Page_Schedule = nil
	
	property Entity Page_EditSchedule = nil
	
	property Entity Page_User = nil
	
	property Entity Page_EditUser = nil
	
	property Entity Popup_EditSchedule_Add = nil
	
	property Entity Popup_EditSchedule_Edit = nil
	
	property Entity Popup_EditSchedule_Delete = nil
	
	property Entity Popup_User_Detail = nil
	
	property Entity Popup_EditUser_Add = nil
	
	property Entity Popup_EditUser_Edit = nil
	
	property integer TimeOffset = 0
	
	property table PageByTabButton = {}
	
	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		local entity = self.Entity
		local panel = entity:GetChildByName("Panel")
		
		-- Title
		local title = panel:GetChildByName("Title")
		
		local btnClose = title:GetChildByName("Btn_Exit")
		btnClose:ConnectEvent(ButtonClickEvent, function(evt) self:OnClose() end)
		
		local text_timeOffset = title:GetChildByName("Text_TimeOffset")
		local userTimeOffsetStr = self:ToStringWithSign(self.TimeOffset)
		text_timeOffset.TextComponent.Text = userTimeOffsetStr
		text_timeOffset.TextInputComponent.Text = userTimeOffsetStr
		text_timeOffset:ConnectEvent(TextInputEndEditEvent, function(evt) self:OnChanged_TimeOffset(evt) end)
		self.Text_TimeOffset = text_timeOffset
		
		local btn_tooltip = text_timeOffset:GetChildByName("Btn_Tooltip")
		local panel_tooltip = btn_tooltip:GetChildByName("Panel_TooTip")
		btn_tooltip:ConnectEvent(ButtonClickEvent, function(evt) panel_tooltip.Enable = not panel_tooltip.Enable end)
		
		-- Tab Buttons
		local tabButtons = panel:GetChildByName("TabButtons")
		
		local Btn_Schedule = tabButtons:GetChildByName("Btn_Schedule")
		local Btn_EditSchedule = tabButtons:GetChildByName("Btn_EditSchedule")
		local Btn_User = tabButtons:GetChildByName("Btn_User")
		local Btn_EditUser = tabButtons:GetChildByName("Btn_EditUser")
		
		-- Pages
		local pages = panel:GetChildByName("Pages")
		
		local Page_Schedule = pages:GetChildByName("Page_Schedule")
		Page_Schedule.UIGMGameEventToolSchedule.Parent = self
		self.Page_Schedule = Page_Schedule
		
		local Page_EditSchedule = pages:GetChildByName("Page_EditSchedule")
		Page_EditSchedule.UIGMGameEventToolEditSchedule.Parent = self
		self.Page_EditSchedule = Page_EditSchedule
		
		local Page_User = pages:GetChildByName("Page_User")
		Page_User.UIGMGameEventToolUser.Parent = self
		self.Page_User = Page_User
		
		local Page_EditUser = pages:GetChildByName("Page_EditUser")
		Page_EditUser.UIGMGameEventToolEditUser.Parent = self
		self.Page_EditUser = Page_EditUser
		
		local pageByTabButton = self.PageByTabButton
		pageByTabButton[Btn_Schedule] = Page_Schedule
		pageByTabButton[Btn_EditSchedule] = Page_EditSchedule
		pageByTabButton[Btn_User] = Page_User
		pageByTabButton[Btn_EditUser] = Page_EditUser
		
		for button, page in pairs(pageByTabButton) do
			button:ConnectEvent(ButtonClickEvent, function(evt) self:OnClickTabButton(evt) end)
		end
		
		self.Popup_EditSchedule_Add = panel:GetChildByName("Popup_EditSchedule_Add")
		self.Popup_EditSchedule_Add.UIGMGameEventToolEditSchedulePopupAdd.Parent = self
		
		self.Popup_EditSchedule_Edit = panel:GetChildByName("Popup_EditSchedule_Edit")
		self.Popup_EditSchedule_Edit.UIGMGameEventToolEditSchedulePopupEdit.Parent = self
		
		self.Popup_EditSchedule_Delete = panel:GetChildByName("Popup_EditSchedule_Delete")
		self.Popup_EditSchedule_Delete.UIGMGameEventToolEditSchedulePopupDelete.Parent = self
		
		self.Popup_EditUser_Add = panel:GetChildByName("Popup_EditUser_Add")
		self.Popup_EditUser_Add.UIGMGameEventToolEditUserPopupAdd.Parent = self
		
		self.Popup_EditUser_Edit = panel:GetChildByName("Popup_EditUser_Edit")
		self.Popup_EditUser_Edit.UIGMGameEventToolEditUserPopupEdit.Parent = self
		
		self.Popup_User_Detail = panel:GetChildByName("Popup_User_Detail")
		self.Popup_User_Detail.UIGMGameEventToolUserPopupDetail.Parent = self
		
		local evt = ButtonClickEvent(Btn_Schedule)
		self:OnClickTabButton(evt)
		
		self.Entity:SetEnable(true)
	end
	
	@ExecSpace("ClientOnly")
	method void OnClose()
		self.Entity:SetEnable(false)
	end
	
	@ExecSpace("ClientOnly")
	method void OnChanged_TimeOffset(TextInputEndEditEvent evt)
		local offset = math.tointeger(tonumber(evt.text))
		local textInputComp = self.Text_TimeOffset.TextInputComponent
		
		if offset == nil then
			textInputComp.Text = self:ToStringWithSign(self.TimeOffset)
			return
		end
		
		-- The UTC time offset ranges from -23 hours to +23 hours.
		if offset <= -24 or offset >= 24 then
			textInputComp.Text = self:ToStringWithSign(self.TimeOffset)
			return
		end
		
		self.TimeOffset = offset
		textInputComp.Text = self:ToStringWithSign(offset)
		
		self:Invalidate()
	end
	
	@ExecSpace("ClientOnly")
	method string ToStringWithSign(integer num)
		-- Return the positive number with a '+' sign attached.
		if num >= 0 then
			return "+" .. tostring(num)
		else
			return tostring(num)
		end
	end
	
	@ExecSpace("ClientOnly")
	method void OnClickTabButton(ButtonClickEvent evt)
		local entity = evt.Entity
		
		self:SetDisableAllButtons()
		self:SetEnableButton(entity, true)
		
		self:DisableAllPages()
		
		---@type Entity
		local page = self.PageByTabButton[entity]
		if page ~= nil then
			page.Enable = true
		end
	end
	
	@ExecSpace("ClientOnly")
	method void SetDisableAllButtons()
		for tab, _ in pairs(self.PageByTabButton) do
			self:SetEnableButton(tab, false)
		end
	end
	
	@ExecSpace("ClientOnly")
	method void SetEnableButton(Entity entity, boolean enable)
		local spriteGUIComp = entity.SpriteGUIRendererComponent
		local textComp = entity.TextComponent
		
		if enable then
			spriteGUIComp.ImageRUID = "e22dca176e7c48b39d5b40554b546e22"
			textComp.FontColor = Color.FromHexCode("#653122")
		else
			spriteGUIComp.ImageRUID = "9bb8e4d004fb46bb9c1b528b3c1ebf9f"
			textComp.FontColor = Color.FromHexCode("#ffe398")
		end
	end
	
	@ExecSpace("ClientOnly")
	method void DisableAllPages()
		for _, page in pairs(self.PageByTabButton) do
			page.Enable = false
		end
	end
	
	@ExecSpace("ClientOnly")
	method void Invalidate()
		self.Page_Schedule.UIGMGameEventToolSchedule:Invalidate(false)
		self.Page_EditSchedule.UIGMGameEventToolEditSchedule:Invalidate(false)

		self.Page_User.UIGMGameEventToolUser:Invalidate(false)
		self.Page_EditUser.UIGMGameEventToolEditUser:Invalidate(false)
	end
	
	@ExecSpace("ClientOnly")
	method void OpenPopup_ScheduleAdd()
		self.Popup_EditSchedule_Add.UIGMGameEventToolEditSchedulePopupAdd:Open()
	end
	
	@ExecSpace("ClientOnly")
	method void OpenPopup_ScheduleEdit(GameEventScheduleData editData)
		self.Popup_EditSchedule_Edit.UIGMGameEventToolEditSchedulePopupEdit:Open(editData)
	end
	
	@ExecSpace("ClientOnly")
	method void OpenPopup_ScheduleDelete(integer id)
		self.Popup_EditSchedule_Delete.UIGMGameEventToolEditSchedulePopupDelete:Open(id)
	end
	
	@ExecSpace("ClientOnly")
	method void OpenPopup_UserDetail(UserGameEventData userData)
		self.Popup_User_Detail.UIGMGameEventToolUserPopupDetail:Open(userData)
	end
	
	@ExecSpace("ClientOnly")
	method void OpenPopup_UserAdd()
		self.Popup_EditUser_Add.UIGMGameEventToolEditUserPopupAdd:Open()
	end
	
	@ExecSpace("ClientOnly")
	method void OpenPopup_UserEdit(UserGameEventData originalUserData, UserGameEventData editUserData)
		self.Popup_EditUser_Edit.UIGMGameEventToolEditUserPopupEdit:Open(originalUserData, editUserData)
	end
	
end