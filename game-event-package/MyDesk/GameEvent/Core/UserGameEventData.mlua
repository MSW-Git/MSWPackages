@Struct
script UserGameEventData

	property integer Id = 0

	property integer DefId = 0

	property table Value = nil

	property integer UpdateTime = 0

	property boolean IsDirty = false

	property table LastGoodData = nil

	method boolean CopyFrom(UserGameEventData other)
		self.Id = other.Id
		self.DefId = other.DefId
		
		local isValueExist = false
		if not _Util:IsNilorEmptyTable(other.Value) then
			local success, result = pcall(_HttpService.JSONEncode, _HttpService, other.Value)
			if not success then
				log_error(string.format("UserGameEventData CopyFrom Failed. Id : %d, DefId : %d, Error : %s", self.Id, self.DefId, result))
				return false
			end
		
			if not _Util:IsNilorEmptyString(result) then
				self.Value = _HttpService:JSONDecode(result)
				isValueExist = true
			end
		end
		
		if not isValueExist then
			self.Value = nil
		end
		
		self.UpdateTime = other.UpdateTime
		return true
	end

	method table Serialize()
		if not self.IsDirty then
			return self.LastGoodData
		end
		
		local dbItem = {}
		dbItem[1] = {self.Id, self.DefId, self.UpdateTime}
		
		local value = self.Value
		if not _Util:IsNilorEmptyTable(value) then
			local success, result = pcall(_HttpService.JSONEncode, _HttpService, dbItem)
			if not success then
				log_error(string.format("UserGameEventData Serialize failed. Id : %d, DefId : %d, Error : %s",
					self.Id, self.DefId, result))
				return self.LastGoodData
			end
			
			dbItem[2] = value
		end
		
		self.LastGoodData = dbItem
		return dbItem
	end

	method boolean SerializeFromTool(table dbItem)
		if self.Id == nil then
			log_error("Id is nil.")
			return false
		end
		
		if self.DefId == nil then
			log_error(string.format("DefId is nil. Id : %d", self.Id))
			return false
		end
		
		if self.UpdateTime == nil then
			log_error(string.format("UpdateTime is nil. Id : %d, DefId : %d", self.Id, self.DefId))
			return false
		end
		
		dbItem[1] = {self.Id, self.DefId, self.UpdateTime}
		
		local value = self.Value
		if not _Util:IsNilorEmptyTable(value) then
			local success, result = pcall(_HttpService.JSONEncode, _HttpService, dbItem)
			if not success then
				log_error(string.format("UserGameEventData Serialize failed. Id : %d, DefId : %d, Error : %s",
					self.Id, self.DefId, result))
				return false
			end
			
			dbItem[2] = value
		end
		
		return true
	end

	method boolean Deserialize(table dbItem)
		local info = dbItem[1]
		if info == nil then
			return false
		end
		
		local id = info[1]
		local defId = info[2]
		local updateTime = info[3]
		
		if id == nil or defId == nil or updateTime == nil then
			return false
		end
		
		self.Id = id
		self.DefId = defId
		self.Value = dbItem[2]
		self.UpdateTime = updateTime
		self.LastGoodData = dbItem
		
		return true
	end

	method void DeserializeFromTool(table dbItem)
		local info = dbItem[1]
		
		self.Id = info[1]
		self.DefId = info[2]
		self.UpdateTime = info[3]
		self.Value = dbItem[2]
	end

	method void Init(integer id, integer defId)
		self.Id = id
		self.DefId = defId
	end

	method void SetValue(table value)
		self.Value = value
		self:SetDirty()
	end

	method void SetDirty()
		self.IsDirty = true
		self.UpdateTime = _DateTimeLogic:GetTimeElapsed()
	end

end