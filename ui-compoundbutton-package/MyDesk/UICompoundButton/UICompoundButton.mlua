@Component
script UICompoundButton extends Component

	property TextComponent Label = nil

	property boolean IsOn = false

	property boolean Interactable = true

	property UICompoundButtonGroup ButtonGroup = nil

	property number AnimationDuration = 0.1

	property boolean UseAnimation = true

	property string SoundRUID = nil

	property number SoundVolume = 1

	property Entity OnStateEntity = nil

	property Entity OffStateEntity = nil

	property boolean UseButtonStateChangedEvent = false

	property number DisabledAlphaValue = 0.5

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		self:SetupComponents()
		self:SetupEvents()
		self:UpdateVisualState(false)
		
		if self.ButtonGroup ~= nil then
			self.ButtonGroup:RegisterButton(self)
		end
	end

	@ExecSpace("ClientOnly")
	method void SetupComponents()
		-- Ensure ButtonComponent exists
		if self.Entity.ButtonComponent == nil then
			self.Entity:AddComponent(ButtonComponent)
		end
	end

	@ExecSpace("ClientOnly")
	method void SetupEvents()
		-- Connect click event
		self.Entity:ConnectEvent(ButtonClickEvent, self.OnClick)
		
		-- Connect button state change events
		if self.UseButtonStateChangedEvent then
			self.Entity:ConnectEvent(ButtonStateChangeEvent, self.OnButtonStateChanged)
		end
	end

	@ExecSpace("ClientOnly")
	method void OnClick()
		if not self.Interactable then
			return
		end
		
		self:Toggle()
	end

	@ExecSpace("ClientOnly")
	method void OnButtonStateChanged(ButtonStateChangeEvent event)
		-- Handle button state changes (hover, pressed, etc.)
		if event.state == ButtonState.Hover then
			self:OnHover()
		elseif event.state == ButtonState.Normal then
			self:OnUnhover()
		end
	end

	@ExecSpace("ClientOnly")
	method void Toggle()
		self:SetIsOn(not self.IsOn, true)
		self:PlaySound()
	end

	@ExecSpace("ClientOnly")
	method void SetIsOn(boolean value, boolean sendCallback)
		-- Don't change if value is the same
		if self.IsOn == value then
			return
		end
		
		local oldState = self.IsOn
		if self.ButtonGroup ~= nil then
			if not self.ButtonGroup:TryOnButtonChanged(self, oldState, value, sendCallback, false) then
				return
			end
		end
		
		self.IsOn = value
		
		self:UpdateVisualState(sendCallback)
		
		if sendCallback then
			self:SendCallbacks()
			
			if self.ButtonGroup ~= nil then
				self.ButtonGroup:SendGroupCallbacks()
			end
		end
	end

	@ExecSpace("ClientOnly")
	method void SetIsOnIgnoringGroupRule(boolean value, boolean sendCallback)
		if self.IsOn == value then
			return
		end
		
		self.IsOn = value
		if self.ButtonGroup ~= nil then
			self.ButtonGroup:TryOnButtonChanged(self, self.IsOn, value, sendCallback, true)
		end
		
		self:UpdateVisualState(sendCallback)
		
		if sendCallback then
			self:SendCallbacks()
		end
	end

	@ExecSpace("ClientOnly")
	method void SetIsOnWithoutNotify(boolean value)
		self:SetIsOn(value, false)
	end

	@ExecSpace("ClientOnly")
	method void SetInteractable(boolean interactable)
		self.Interactable = interactable
		
		local buttonComp = self.Entity.ButtonComponent
		if isvalid(buttonComp) then
			buttonComp.Enable = interactable
		end
		
		-- Update visual state to show disabled state
		self:UpdateVisualState(false)
	end

	@ExecSpace("ClientOnly")
	method void UpdateVisualState(boolean animate)
		-- Override this method
		local onStateEntity = self.OnStateEntity
		local offStateEntity = self.OffStateEntity
		
		local isOn = self.IsOn
		
		if isvalid(onStateEntity) then
			onStateEntity.Enable = isOn
		end
			
		if isvalid(offStateEntity) then
			offStateEntity.Enable = not isOn
		end
	end

	@ExecSpace("ClientOnly")
	method void OnHover()
		-- Override this method to add hover effects
	end

	@ExecSpace("ClientOnly")
	method void OnUnhover()
		-- Override this method to remove hover effects
	end

	@ExecSpace("ClientOnly")
	method void SendCallbacks()
		-- Send value changed callback
		local event = UICompoundButtonValueChangedEvent()
		event.Entity = self.Entity
		event.Value = self.IsOn
		
		self.Entity:SendEvent(event)
	end

	@ExecSpace("ClientOnly")
	method void PlaySound()
		local soundRUID = self.SoundRUID
		if _Util:IsNilorEmptyString(soundRUID) then
			return
		end
		
		_SoundService:PlaySound(soundRUID, self.SoundVolume)
	end

	@ExecSpace("ClientOnly")
	method Color GetDisabledColor(Color color)
		local v = color:Grayscale()
		return Color(v, v, v, self.DisabledAlphaValue)
	end

	@ExecSpace("ClientOnly")
	method void SetStyle(string styleName)
		-- override this function
	end

end