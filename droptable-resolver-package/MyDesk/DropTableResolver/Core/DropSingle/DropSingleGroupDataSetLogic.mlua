@Logic
script DropSingleGroupDataSetLogic extends Logic

	property table DataTable = {}

	method boolean Load()
		---@type table<integer, table<DropSingleGroupData>>
		local dataTable = self.DataTable
		local rows = _DataService:GetTable("DropSingleGroupDataSet"):GetAllRow()
		for i = 1, #rows do
			local row = rows[i]
			local data = DropSingleGroupData()
			if not data:Load(row) then
				return false
			end
			
			local id = data.Id
			local dataList = dataTable[id]
			if dataList == nil then
				dataList = {}
				dataTable[id] = dataList
			end
			
			local index = #dataList + 1
			data.Index = index
			dataList[index] = data
		end
		
		if not self:IsValid() then
			return false
		end
		
		return true
	end

	method boolean IsValid()
		-- Verifies that the data corresponding to the ID used in the DataSet exists.
		---@type table<integer, table<DropSingleGroupData>>
		local dataTable = self.DataTable
		for id, dataList in pairs(dataTable) do
			for i = 1, #dataList do
				local data = dataList[i]
				if _ItemDataTableLogic:GetData(data.ItemId) == nil then
					log_error(string.format("Invalid ItemId. Id : %d, GroupId : %d, ItemId : %d", id, data.Id, data.ItemId))
					return false
				end
			end
		end
		
		return true
	end

	method table GetDataList(integer dropId)
		return self.DataTable[dropId]
	end

	method DropSingleGroupData Pick(integer groupId)
		---@type table<DropSingleGroupData>
		local groupDataList = self:GetDataList(groupId)
		
		local totalWeight = 0
		local cumulativeWeights = {}
		
		for i = 1, #groupDataList do
			local groupData = groupDataList[i]
			
			totalWeight += groupData.Weight
			cumulativeWeights[i] = totalWeight
		end
		
		local pickValue = _UtilLogic:RandomIntegerRange(1, totalWeight)
		for i = 1, #cumulativeWeights do
			if pickValue <= cumulativeWeights[i] then
				return groupDataList[i]
			end
		end
		
		return nil	-- Error
	end

end