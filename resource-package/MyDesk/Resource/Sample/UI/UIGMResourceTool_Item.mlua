@Component
script UIGMResourceTool_Item extends Component

	property Entity Type = nil

	property Entity Value = nil

	property Entity NextRechargeTime = nil

	property integer Index = 0

	property any onChangedValue = nil

	property boolean IsRechargeable = false

	property integer LastSaveTimeInSeconds = 0

	property Entity PedictedValue = nil

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		self.Type = self.Entity:GetChildByName("Text_Type")
		self.Type:ConnectEvent(TextInputEndEditEvent, function(evt) self:OnChangedType(evt) end)
		
		self.Value = self.Entity:GetChildByName("Text_Value")
		self.Value:ConnectEvent(TextInputEndEditEvent, function(evt) self:OnChangedValue(evt) end)
		
		self.PedictedValue = self.Entity:GetChildByName("Text_PedictedValue")
		
		self.NextRechargeTime = self.Entity:GetChildByName("Text_NextRechargeTime")
		self.NextRechargeTime:ConnectEvent(TextInputEndEditEvent, function(evt) self:OnChangedNextRechargeTime(evt) end)
	end

	@ExecSpace("ClientOnly")
	method void Apply(table data, integer index, integer lastSaveTimeInSeconds)
		if data == nil then
			log_error("Apply data is nil")
			return
		end
		
		local type = data.Type
		local value = data.Value
		self.Index = index
		self.LastSaveTimeInSeconds = lastSaveTimeInSeconds
		
		local nextRechargeTime = data.NextRechargeServerTime
		if type == nil or value == nil then
			log_error("Apply data is nil")
			return
		end
		
		self.Type.TextComponent.Text = tostring(type)
		self.Value.TextComponent.Text = tostring(value)
		
		local tblData = _ResourceDataSetLogic:GetData(type)
		if tblData == nil then
			return
		end
		
		self.IsRechargeable = tblData.IsRechargeable 
		local isRechargeable = self.IsRechargeable
		if isRechargeable then
			self.NextRechargeTime.TextComponent.Text = tostring(nextRechargeTime)
		else
			self.NextRechargeTime.TextComponent.Text = ""
		end
		
		self.PedictedValue.TextComponent.Text = ""
		self.NextRechargeTime.TextInputComponent.Enable = isRechargeable
	end

	@ExecSpace("ClientOnly")
	method void Clear()
		self.Type.TextComponent.Text = ""
		self.Value.TextComponent.Text = ""
		self.NextRechargeTime.TextComponent.Text = ""
		self.PedictedValue.TextComponent.Text = ""
		self.IsRechargeable = false
	end

	@ExecSpace("ClientOnly")
	method void OnChangedType(TextInputEndEditEvent evt)
		local value = self.Value.TextComponent.Text
		local nextRechargeTime = self.NextRechargeTime.TextComponent.Text
		
		if self.onChangedValue ~= nil then
			self.onChangedValue(self.Index, evt.text, value, nextRechargeTime)
		end
	end

	@ExecSpace("ClientOnly")
	method void OnChangedValue(TextInputEndEditEvent evt)
		local type = self.Type.TextComponent.Text
		local nextRechargeTime = self.NextRechargeTime.TextComponent.Text
		
		if self.onChangedValue ~= nil then
			self.onChangedValue(self.Index, type, evt.text, nextRechargeTime)
		end
	end

	@ExecSpace("ClientOnly")
	method void OnChangedNextRechargeTime(TextInputEndEditEvent evt)
		local type = self.Type.TextComponent.Text
		local value = self.Value.TextComponent.Text
		
		if self.onChangedValue ~= nil then
			self.onChangedValue(self.Index, type, value, evt.text)
		end
	end

	@ExecSpace("ClientOnly")
	method void OnUpdate(number delta)
		if not self.IsRechargeable then
			return
		end
		
		local value = self:CalcPedictedValue()
		if value == nil then
			return
		end
		
		self.PedictedValue.TextComponent.Text = tostring(value)
	end

	@ExecSpace("ClientOnly")
	method integer CalcPedictedValue()
		local type = tonumber(self.Type.TextComponent.Text)
		if type == nil then
			return nil
		end
		
		local value = tonumber(self.Value.TextComponent.Text)
		if value == nil then
			return nil
		end
		
		local tblData = _ResourceDataSetLogic:GetData(type)
		if tblData == nil then
			return nil
		end
		
		local nextRechargeServerTime = tonumber(self.NextRechargeTime.TextComponent.Text)
		if value >= tblData.MaxValue then
			return nil
		end
		
		local elapsedSecondsSinceLastSave = math.floor(_DateTimeLogic:GetTimeElapsed() / 1000) - self.LastSaveTimeInSeconds
		if elapsedSecondsSinceLastSave < 0 then
			elapsedSecondsSinceLastSave = 0
		end
		
		local rechargeTimeLeft = nextRechargeServerTime
		if elapsedSecondsSinceLastSave < rechargeTimeLeft then
			return nil
		end
		
		local rechargeCount = math.floor(((tblData.RechargeInterval - rechargeTimeLeft) + elapsedSecondsSinceLastSave) / tblData.RechargeInterval)
		
		if rechargeCount >= 999999 then
			return tblData.MaxValue
		end
		
		return math.min(tblData.MaxValue, value + (rechargeCount * tblData.RechargeValue))
	end

end