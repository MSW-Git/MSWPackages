@Struct
script ItemCreateParamStruct

	property integer ItemId = 0

	property integer ItemCount = 0

	property boolean IsIgnoreInvenCapacity = true

	property integer EndDateSeconds = 0

	property integer Grade = nil

	method void CopyFrom(ItemCreateParamStruct other)
		self.ItemId = other.ItemId
		self.ItemCount = other.ItemCount
		self.EndDateSeconds = other.EndDateSeconds
		self.Grade = other.Grade
	end

	method ItemCreateParamStruct Clone()
		local struct = ItemCreateParamStruct()
		struct:CopyFrom(self)
		
		return struct
	end

	method boolean IsValidData(table failInfo)
		if self.ItemId == nil or self.ItemId <= 0 or self.ItemCount == nil or self.ItemCount <= 0 then
			return false
		end
		
		if not self:IsValidGearData(failInfo) then
			return false
		end
		
		return true
	end

	method boolean IsValidGearData(table failInfo)
		local itemData = _ItemDataLogic:GetData(self.ItemId)
		if itemData == nil then
			local message = string.format('ItemCreateParamStruct Error. Cannot find itemId. ItemId : %d', self.ItemId)
			log_error(message)
			failInfo.Message = message
			return false
		end
		
		local isGearItem = (itemData.Category == _ItemCategoryEnum.Gear)
		if not isGearItem then
			return true
		end
		
		local gearData = itemData:GetGearData()
		if gearData == nil then
			local message = string.format('ItemCreateParamStruct Error. Cannot find gearData. ItemId : %d', self.ItemId)
			log_error(message)
			failInfo.Message = message
			return false
		end
		
		return true
	end

	method ItemStruct CreateItemStruct(boolean nonStackable)
		local itemData = _ItemDataLogic:GetData(self.ItemId)
		if itemData == nil then
			return nil
		end
		
		local itemStruct = ItemStruct()
		itemStruct.ItemId = self.ItemId
		if nonStackable then
			itemStruct.Count = 1
		else
			itemStruct.Count = self.ItemCount
		end
		
		itemStruct.EndDateSeconds = self.EndDateSeconds
		itemStruct.Lock = false
		
		if itemData.Category == _ItemCategoryEnum.Gear then
			if not self:CreateGearStruct(itemStruct) then
				return nil
			end
		end
		
		return itemStruct
	end

	method boolean CreateGearStruct(ItemStruct itemStruct)
		local gearData = itemStruct:GetGearData()
		if gearData == nil then
			return false
		end
		
		local gearStruct = ItemGearStruct()
		itemStruct.ItemGearStruct = gearStruct
		
		if self.Grade ~= nil then
			gearStruct.Grade = self.Grade
		else
			gearStruct.Grade = gearData.DefaultGrade
		end
		
		return true
	end

	method boolean Set(integer itemId, integer count, integer endDateSecond)
		local itemData = _ItemDataLogic:GetData(itemId)
		if itemData == nil then
			return false
		end
		
		self.ItemId = itemId
		self.ItemCount = count
		
		if endDateSecond == nil then
			if itemData.ExpirationSeconds ~= 0 then
				self.EndDateSeconds = math.floor((itemData.ExpirationSeconds + _DateTimeLogic:GetTimeElapsed() ) / 1000)
			else
				self.EndDateSeconds = math.floor(itemData.ExpirationDate / 1000)
			end
		else
			self.EndDateSeconds = endDateSecond
		end
		
		return true
	end

end